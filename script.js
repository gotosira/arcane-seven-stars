// Language switching system
let currentLanguage = localStorage.getItem('language') || 'th';

const translations = {
    th: {
        title: "üåü ‡πÑ‡∏û‡πà‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß 7 ‡∏î‡∏ß‡∏á üåü",
        subtitle: "üîÆ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì", 
        // Navigation
        navDaily: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
        navSpreads: "‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÑ‡∏û‡πà", 
        navJournal: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
        navAnalytics: "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥",
        navMeditation: "‡∏ó‡∏≥‡∏™‡∏°‡∏≤‡∏ò‡∏¥",
        // Settings
        settings: "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
        soundEffects: "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö",
        backgroundMusic: "‡πÄ‡∏û‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á",
        notifications: "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô",
        theme: "‡∏ò‡∏µ‡∏°",
        language: "‡∏†‡∏≤‡∏©‡∏≤",
        themeDefault: "‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°",
        themeDark: "‡∏°‡∏∑‡∏î", 
        themeGolden: "‡∏ó‡∏≠‡∏á",
        themeNature: "‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥",
        resetDaily: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏û‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô",
        close: "‡∏õ‡∏¥‡∏î",
        // Daily Reading
        dailyReading: "‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÑ‡∏û‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô",
        dailyDescription: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏û‡πà‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        clickCard: "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏û‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô",
        yourDailyCard: "‡πÑ‡∏û‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        share: "‡πÅ‡∏ä‡∏£‡πå",
        save: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", 
        read: "‡∏≠‡πà‡∏≤‡∏ô",
        luckyColor: "‡∏™‡∏µ‡∏°‡∏á‡∏Ñ‡∏•",
        luckyNumbers: "‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•", 
        luckyTime: "‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏µ",
        dailyAffirmation: "‡∏Ñ‡∏≥‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô",
        yourSelectedCard: "‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
        clickForNew: "‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏û‡πà‡πÉ‡∏´‡∏°‡πà"
    },
    en: {
        title: "üåü Seven Wonderful Stars üåü",
        subtitle: "üîÆ Unlock the mysteries of your spiritual journey",
        // Navigation
        navDaily: "Today",
        navSpreads: "Card Spreads",
        navJournal: "Journal", 
        navAnalytics: "Analytics",
        navMeditation: "Meditation",
        // Settings
        settings: "Settings",
        soundEffects: "Sound Effects",
        backgroundMusic: "Background Music",
        notifications: "Daily Notifications",
        theme: "Theme",
        language: "Language",
        themeDefault: "Default",
        themeDark: "Dark",
        themeGolden: "Golden", 
        themeNature: "Nature",
        resetDaily: "Reset Daily Card",
        close: "Close",
        // Daily Reading
        dailyReading: "Daily Card Reading",
        dailyDescription: "Choose one card to reveal your daily fortune",
        clickCard: "Click the card below to reveal your daily fortune",
        yourDailyCard: "Your Daily Card",
        share: "Share",
        save: "Save",
        read: "Read Aloud",
        luckyColor: "Lucky Color",
        luckyNumbers: "Lucky Numbers", 
        luckyTime: "Lucky Time",
        dailyAffirmation: "Daily Affirmation",
        yourSelectedCard: "Your Selected Card",
        clickForNew: "Click to draw a new card"
    }
};

// Daily quotes rotation
const dailyQuotes = {
    th: [
        "üîÆ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì",
        "‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏ä‡∏∞‡∏ï‡∏≤‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏ó‡∏µ‡∏•‡∏∞‡πÉ‡∏ö‡πÑ‡∏û‡πà",
        "‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÑ‡∏£‡πâ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î",
        "‡∏ó‡∏µ‡πà‡∏ã‡∏∂‡πà‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏™‡∏°‡∏±‡∏¢‡πÉ‡∏´‡∏°‡πà",
        "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏•",
        "‡πÇ‡∏≠‡∏ö‡∏Å‡∏≠‡∏î‡∏û‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏®‡∏©‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì",
        "‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    ],
    en: [
        "üîÆ Unlock the mysteries of your spiritual journey",
        "Discover your destiny, one card at a time",
        "Every moment holds infinite possibilities", 
        "Where ancient wisdom meets modern insight",
        "Transform your life through cosmic guidance",
        "Embrace the magic within you",
        "Your future begins with today's choice"
    ]
};

function switchLanguage(lang) {
    currentLanguage = lang;
    localStorage.setItem('language', lang);
    updateUILanguage();
    updateDailyQuote();
}

function updateUILanguage() {
    const t = translations[currentLanguage];
    
    // Update title and subtitle
    document.querySelector('h1').innerHTML = t.title;
    document.querySelector('.subtitle').textContent = t.subtitle;
    
    // Update navigation tabs
    const navTabs = document.querySelectorAll('.nav-tab');
    const navKeys = ['navDaily', 'navSpreads', 'navJournal', 'navAnalytics', 'navMeditation'];
    navTabs.forEach((tab, index) => {
        const icon = tab.querySelector('i').outerHTML;
        tab.innerHTML = `${icon} ${t[navKeys[index]]}`;
    });
    
    // Update main content sections
    updateMainContent(t);
}

function updateMainContent(t) {
    // Daily Reading Tab
    const dailyTitle = document.querySelector('#dailyTab h2');
    if (dailyTitle) dailyTitle.textContent = t.dailyReading;
    
    const dailyDesc = document.querySelector('#dailyTab .description');
    if (dailyDesc) dailyDesc.textContent = t.dailyDescription;
    
    const statusText = document.getElementById('statusText');
    if (statusText && !hasPickedToday) statusText.textContent = t.clickCard;
    
    // Update settings
    const settingsTitle = document.querySelector('.settings-content h3');
    if (settingsTitle) {
        settingsTitle.innerHTML = `<i class="fas fa-cog"></i> ${t.settings}`;
    }
}

function updateDailyQuote() {
    const today = new Date();
    const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
    const quotes = dailyQuotes[currentLanguage];
    const selectedQuote = quotes[dayOfYear % quotes.length];
    
    const quoteElement = document.getElementById('dailyQuote');
    if (quoteElement) {
        quoteElement.textContent = `"${selectedQuote}"`;
    }
}

// English translations for card meanings
const CARD_TRANSLATIONS = {
    '‡∏Å‡∏î‡∏∏‡∏°‡∏†‡∏∞1.png': {
        name: 'Kumbha (Water Bearer)',
        meaning: 'Financial fortune, wealth, asset accumulation. Today is a good day for investment and savings.',
        description: 'This card signifies abundance and prosperity in life. It shows good financial opportunities, asset accumulation, and economic growth.'
    },
    '‡∏Å‡∏î‡∏∏‡∏°‡∏†‡∏∞2.png': {
        name: 'Kumbha (Water Bearer)',
        meaning: 'Financial wealth, prosperity, returns from investments. Be careful with spending.',
        description: 'Wealth and prosperity, showing returns from past efforts and growth in financial stability.'
    },
    '‡∏Å‡∏±‡∏°‡∏°‡∏∞1.png': {
        name: 'Kamma (Karma)',
        meaning: 'Karma, actions, consequences. Today, do good deeds as you will receive good returns.',
        description: 'The card of karmic law, showing the consequences of actions that return to us. Good deeds bring happiness, bad deeds bring suffering.'
    },
    '‡∏Å‡∏±‡∏°‡∏°‡∏∞2.png': {
        name: 'Kamma (Karma)',
        meaning: 'Receiving consequences from past actions. Stay calm and patient, good things are coming.',
        description: 'Present actions determine the future. Use wisdom in all decisions and actions.'
    },
    '‡πÄ‡∏Ñ‡∏´‡∏±‡∏á.png': {
        name: 'Kehang (Property)',
        meaning: 'Property, real estate, housing. Today is good for real estate matters.',
        description: 'Card of property and real estate, signifying investment in housing, land trading, and creating value from assets.'
    }
    // Add more translations as needed...
};

function getCardData(cardFile) {
    const originalData = CARD_DATA[cardFile];
    if (currentLanguage === 'en' && CARD_TRANSLATIONS[cardFile]) {
        return {
            ...originalData,
            name: CARD_TRANSLATIONS[cardFile].name,
            meaning: CARD_TRANSLATIONS[cardFile].meaning,
            description: CARD_TRANSLATIONS[cardFile].description
        };
    }
    return originalData;
}

// Enhanced Thai Fortune Cards Configuration
const CARD_DATA = {
    '‡∏Å‡∏î‡∏∏‡∏°‡∏†‡∏∞1.png': {
        name: '‡∏Å‡∏î‡∏∏‡∏°‡∏†‡∏∞ (Kumbha)',
        innerText: 'Wealth',
        meaning: '‡∏î‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á ‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏™‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°',
        description: '‡πÑ‡∏û‡πà‡∏ô‡∏µ‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∏‡∏î‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ñ‡∏∂‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏™‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à'
    },
    '‡∏Å‡∏î‡∏∏‡∏°‡∏†‡∏∞2.png': {
        name: '‡∏Å‡∏î‡∏∏‡∏°‡∏†‡∏∞ (Kumbha)',
        innerText: 'Prosperity',
        meaning: '‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πà‡∏≥‡∏£‡∏ß‡∏¢ ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏£‡∏∏‡πà‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô'
    },
    '‡∏Å‡∏±‡∏°‡∏°‡∏∞1.png': {
        name: '‡∏Å‡∏±‡∏°‡∏°‡∏∞ (Kamma)',
        innerText: 'Karma',
        meaning: '‡∏Å‡∏£‡∏£‡∏° ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ ‡∏ú‡∏•‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏£‡∏£‡∏° ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏á‡∏ó‡∏≥‡πÅ‡∏ï‡πà‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡πÜ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏î‡∏µ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏é ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏™‡∏π‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏≤ ‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏à‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤ ‡∏™‡∏¥‡πà‡∏á‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏à‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏Ç‡πå‡∏°‡∏≤'
    },
    '‡∏Å‡∏±‡∏°‡∏°‡∏∞2.png': {
        name: '‡∏Å‡∏±‡∏°‡∏°‡∏∞ (Kamma)',
        innerText: 'Action',
        meaning: '‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏î‡∏ó‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡πÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤',
        description: '‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á'
    },
    '‡πÄ‡∏Ñ‡∏´‡∏±‡∏á.png': {
        name: '‡πÄ‡∏Ñ‡∏´‡∏±‡∏á (Kehang)',
        innerText: 'Property',
        meaning: '‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô ‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏∑‡∏≠‡∏ô ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå ‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢ ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô'
    },
    '‡πÄ‡∏Ñ‡∏´‡∏±‡∏á (2).png': {
        name: '‡πÄ‡∏Ñ‡∏´‡∏±‡∏á (Kehang)',
        innerText: 'Property',
        meaning: '‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô',
        description: '‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô'
    },
    '‡∏ç‡∏≤‡∏ï‡∏¥.png': {
        name: '‡∏ç‡∏≤‡∏ï‡∏¥ (Yati)',
        innerText: 'Relatives',
        meaning: '‡∏ç‡∏≤‡∏ï‡∏¥‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ù‡∏π‡∏á ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡∏ç‡∏≤‡∏ï‡∏¥‡∏°‡∏¥‡∏ï‡∏£ ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏û‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏™‡∏±‡∏á‡∏Ñ‡∏° ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á'
    },
    '‡∏ç‡∏≤‡∏ï‡∏¥2.png': {
        name: '‡∏ç‡∏≤‡∏ï‡∏¥ (Yati)',
        innerText: 'Support',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏ç‡∏≤‡∏ï‡∏¥‡∏°‡∏¥‡∏ï‡∏£ ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á',
        description: '‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô'
    },
    '‡∏ï‡∏ô‡∏∏1.png': {
        name: '‡∏ï‡∏ô‡∏∏ (Tanu)',
        innerText: 'Body',
        meaning: '‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏î‡∏µ ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏¥‡∏ï‡πÉ‡∏à ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï'
    },
    '‡∏ï‡∏ô‡∏∏2.png': {
        name: '‡∏ï‡∏ô‡∏∏ (Tanu)',
        innerText: 'Strength',
        meaning: '‡∏û‡∏•‡∏±‡∏á‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô',
        description: '‡∏û‡∏•‡∏±‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏¥‡∏ï‡πÉ‡∏à ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á'
    },
    '‡∏ó‡∏≤‡∏ô‡∏±‡∏á.png': {
        name: '‡∏ó‡∏≤‡∏ô‡∏±‡∏á (Tanung)',
        innerText: 'Giving',
        meaning: '‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏ï‡∏ï‡∏≤ ‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏à‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡∏™‡∏π‡πà‡∏Ñ‡∏∏‡∏ì',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏ï‡∏ï‡∏≤ ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏ô‡∏≥‡∏û‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏™‡∏π‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á'
    },
    '‡∏ó‡∏≤‡∏ô‡∏±‡∏á2.png': {
        name: '‡∏ó‡∏≤‡∏ô‡∏±‡∏á (Tanung)',
        innerText: 'Charity',
        meaning: '‡∏ö‡∏∏‡∏ç‡∏Å‡∏∏‡∏®‡∏• ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡πÄ‡∏ü‡∏∑‡πâ‡∏≠‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡πà ‡∏à‡∏á‡πÉ‡∏à‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô',
        description: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏ß‡∏° ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏∏‡∏ç‡∏Å‡∏∏‡∏®‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï'
    },
    '‡∏ó‡∏≤‡∏™‡∏≤1.png': {
        name: '‡∏ó‡∏≤‡∏™‡∏≤ (Tasa)',
        innerText: 'Service',
        meaning: '‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô'
    },
    '‡∏ó‡∏≤‡∏™‡∏≤2.png': {
        name: '‡∏ó‡∏≤‡∏™‡∏≤ (Tasa)',
        innerText: 'Loyalty',
        meaning: '‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏á‡∏£‡∏±‡∏Å‡∏†‡∏±‡∏Å‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏¢‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏á‡∏£‡∏±‡∏Å‡∏†‡∏±‡∏Å‡∏î‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå'
    },
    '‡∏ó‡∏≤‡∏™‡∏µ.png': {
        name: '‡∏ó‡∏≤‡∏™‡∏µ (Tasi)',
        innerText: 'Care',
        meaning: '‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏´‡∏ç‡∏¥‡∏á ‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ç‡∏¥‡∏á ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏î‡∏π ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô'
    },
    '‡∏ó‡∏≤‡∏™‡∏µ2.png': {
        name: '‡∏ó‡∏≤‡∏™‡∏µ (Tasi)',
        innerText: 'Devotion',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡∏•‡∏∞ ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡πà‡∏ß‡∏á‡πÉ‡∏¢',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡∏•‡∏∞ ‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏ó‡∏¥‡∏®‡∏ï‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏£‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç'
    },
    '‡∏ò‡∏ô‡∏±‡∏á.png': {
        name: '‡∏ò‡∏ô‡∏±‡∏á (Dhanung)',
        innerText: 'Treasure',
        meaning: '‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏°‡∏á‡∏Ñ‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏™‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô'
    },
    '‡∏ò‡∏ô‡∏±‡∏á2.png': {
        name: '‡∏ò‡∏ô‡∏±‡∏á (Dhanung)',
        innerText: 'Fortune',
        meaning: '‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏™‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πà‡∏≥‡∏£‡∏ß‡∏¢ ‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏ö',
        description: '‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πà‡∏≥‡∏£‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏π‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô'
    },
    '‡∏ô‡∏≤‡∏ß‡∏±‡∏á.png': {
        name: '‡∏ô‡∏≤‡∏ß‡∏±‡∏á (Navang)',
        innerText: 'Journey',
        meaning: '‡πÄ‡∏£‡∏∑‡∏≠ ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢ ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà'
    },
    '‡∏ô‡∏≤‡∏ß‡∏±‡∏á2.png': {
        name: '‡∏ô‡∏≤‡∏ß‡∏±‡∏á (Navang)',
        innerText: 'Adventure',
        meaning: '‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢ ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ',
        description: '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏≤‡∏£‡∏Å‡πâ‡∏≤‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡∏ï‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î'
    },
    '‡∏õ‡∏±‡∏ï‡∏ô‡∏¥1.png': {
        name: '‡∏õ‡∏±‡∏ï‡∏ô‡∏¥ (Patni)',
        innerText: 'Wife',
        meaning: '‡∏†‡∏£‡∏£‡∏¢‡∏≤ ‡∏Ñ‡∏π‡πà‡∏Ñ‡∏£‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡πÅ‡∏ü‡πâ‡∏ô ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Ñ‡∏π‡πà'
    },
    '‡∏õ‡∏±‡∏ï‡∏ô‡∏¥2.png': {
        name: '‡∏õ‡∏±‡∏ï‡∏ô‡∏¥ (Patni)',
        innerText: 'Partnership',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏±‡∏ô ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà‡∏Å‡∏±‡∏ô',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô'
    },
    '‡∏õ‡∏±‡∏ï‡∏ô‡∏¥2 (2).png': {
        name: '‡∏õ‡∏±‡∏ï‡∏ô‡∏¥ (Patni)',
        innerText: 'Union',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç',
        description: '‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î'
    },
    '‡∏õ‡∏±‡∏ï‡∏ô‡∏¥2 (3).png': {
        name: '‡∏õ‡∏±‡∏ï‡∏ô‡∏¥ (Patni)',
        innerText: 'Bond',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô',
        description: '‡∏™‡∏≤‡∏¢‡πÉ‡∏¢‡πÅ‡∏´‡πà‡∏á‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå'
    },
    '‡∏õ‡∏¥‡∏ï‡∏≤1.png': {
        name: '‡∏õ‡∏¥‡∏ï‡∏≤ (Pita)',
        innerText: 'Father',
        meaning: '‡∏ö‡∏¥‡∏î‡∏≤ ‡∏û‡πà‡∏≠ ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏ô‡∏∂‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ç‡∏≠‡∏á‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢ ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏û‡∏ö‡∏∏‡∏£‡∏∏‡∏©‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏°‡∏≤'
    },
    '‡∏õ‡∏¥‡∏ï‡∏≤2.png': {
        name: '‡∏õ‡∏¥‡∏ï‡∏≤ (Pita)',
        innerText: 'Authority',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏û‡∏£‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏û‡∏ö‡∏∏‡∏£‡∏∏‡∏©',
        description: '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥ ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏•‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î'
    },
    '‡∏õ‡∏∏‡∏ï‡∏ï‡∏∞1.png': {
        name: '‡∏õ‡∏∏‡∏ï‡∏ï‡∏∞ (Putta)',
        innerText: 'Child',
        meaning: '‡∏ö‡∏∏‡∏ï‡∏£ ‡∏•‡∏π‡∏Å ‡∏ó‡∏≤‡∏¢‡∏≤‡∏ó ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏´‡∏•‡∏≤‡∏ô',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏•‡∏π‡∏Å‡∏´‡∏•‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'
    },
    '‡∏õ‡∏∏‡∏ï‡∏ï‡∏∞2.png': {
        name: '‡∏õ‡∏∏‡∏ï‡∏ï‡∏∞ (Putta)',
        innerText: 'Legacy',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏´‡∏•‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏î‡∏π‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û',
        description: '‡∏°‡∏£‡∏î‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏π‡πà‡∏£‡∏∏‡πà‡∏ô‡∏•‡∏π‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏´‡∏•‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏ù‡∏±‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏´‡∏•‡∏≤‡∏ô'
    },
    '‡∏û‡∏¢‡∏≤‡∏¢‡∏∞1.png': {
        name: '‡∏û‡∏¢‡∏≤‡∏¢‡∏∞ (Phayayah)',
        innerText: 'Effort',
        meaning: '‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏¢‡∏±‡∏ô‡∏´‡∏°‡∏±‡πà‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏£ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏î‡∏µ',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å ‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à'
    },
    '‡∏û‡∏¢‡∏≤‡∏¢‡∏∞2.png': {
        name: '‡∏û‡∏¢‡∏≤‡∏¢‡∏∞ (Phayayah)',
        innerText: 'Persistence',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏µ‡∏¢‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏•‡∏î‡∏•‡∏∞ ‡∏Å‡∏≤‡∏£‡∏ù‡πà‡∏≤‡∏ü‡∏±‡∏ô‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô'
    },
    '‡∏û‡∏±‡∏ô‡∏ò‡∏∏1.png': {
        name: '‡∏û‡∏±‡∏ô‡∏ò‡∏∏ (Pandu)',
        innerText: 'Heritage',
        meaning: '‡πÄ‡∏ú‡πà‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå ‡∏ä‡∏≤‡∏ï‡∏¥‡∏ï‡∏£‡∏∞‡∏Å‡∏π‡∏• ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡πâ‡∏ô‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏°‡∏£‡∏î‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Å‡πÄ‡∏´‡∏á‡πâ‡∏≤ ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏ä‡∏≤‡∏ï‡∏¥‡∏ï‡∏£‡∏∞‡∏Å‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏û‡∏ö‡∏∏‡∏£‡∏∏‡∏©'
    },
    '‡∏û‡∏±‡∏ô‡∏ò‡∏∏2.png': {
        name: '‡∏û‡∏±‡∏ô‡∏ò‡∏∏ (Pandu)',
        innerText: 'Ancestry',
        meaning: '‡∏°‡∏£‡∏î‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏û‡∏ö‡∏∏‡∏£‡∏∏‡∏© ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î‡∏°‡∏≤',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏µ‡∏á‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≠‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏™‡∏π‡πà‡∏£‡∏∏‡πà‡∏ô ‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏û‡∏ö‡∏∏‡∏£‡∏∏‡∏© ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡∏™‡∏≤‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà'
    },
    '‡∏†‡∏£‡∏¥‡∏¢‡∏±‡∏á.png': {
        name: '‡∏†‡∏£‡∏¥‡∏¢‡∏±‡∏á (Phariyang)',
        innerText: 'Companion',
        meaning: '‡∏†‡∏£‡∏£‡∏¢‡∏≤ ‡∏Ñ‡∏π‡πà‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á ‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏π‡πà‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç'
    },
    '‡∏†‡∏£‡∏¥‡∏¢‡∏±‡∏á2.png': {
        name: '‡∏†‡∏£‡∏¥‡∏¢‡∏±‡∏á (Phariyang)',
        innerText: 'Faithfulness',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏á‡∏£‡∏±‡∏Å‡∏†‡∏±‡∏Å‡∏î‡∏µ ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏á‡∏£‡∏±‡∏Å‡∏†‡∏±‡∏Å‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏ó‡∏¥‡∏®‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å'
    },
    '‡πÇ‡∏†‡∏Ñ‡∏≤1.png': {
        name: '‡πÇ‡∏†‡∏Ñ‡∏≤ (Phoka)',
        innerText: 'Inventory',
        meaning: '‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏¥‡∏ô‡∏Å‡∏±‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏¥‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡πÜ'
    },
    '‡πÇ‡∏†‡∏Ñ‡∏≤2.png': {
        name: '‡πÇ‡∏†‡∏Ñ‡∏≤ (Phoka)',
        innerText: 'Enjoyment',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏™‡∏ö‡∏≤‡∏¢ ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡πÜ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏¢‡πá‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏∏‡∏Ç',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏™‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏¥‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏£‡∏ñ‡∏ô‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏¢‡πá‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏∏‡∏Ç'
    },
    '‡∏°‡∏£‡∏ì‡∏∞1.png': {
        name: '‡∏°‡∏£‡∏ì‡∏∞ (Marana)',
        innerText: 'Ending',
        meaning: '‡∏Å‡∏≤‡∏£‡∏à‡∏ö‡∏™‡∏¥‡πâ‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏ç‡πà',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏ö‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï'
    },
    '‡∏°‡∏£‡∏ì‡∏∞2.png': {
        name: '‡∏°‡∏£‡∏ì‡∏∞ (Marana)',
        innerText: 'Transformation',
        meaning: '‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏°‡πà',
        description: '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡∏≤‡∏á‡∏≠‡∏î‡∏µ‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡∏™‡∏π‡πà‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤'
    },
    '‡∏°‡∏±‡∏ä‡∏å‡∏¥‡∏°‡∏≤1.png': {
        name: '‡∏°‡∏±‡∏ä‡∏å‡∏¥‡∏°‡∏≤ (Macchima)',
        innerText: 'Balance',
        meaning: '‡∏ó‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏ô‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÉ‡∏î‡∏ó‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏Å‡∏•‡∏≤‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏Ç‡∏≤‡∏î‡πÑ‡∏õ'
    },
    '‡∏°‡∏±‡∏ä‡∏å‡∏¥‡∏°‡∏≤2.png': {
        name: '‡∏°‡∏±‡∏ä‡∏å‡∏¥‡∏°‡∏≤ (Macchima)',
        innerText: 'Moderation',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏≠‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏≠‡∏î‡∏µ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏• ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå'
    },
    '‡∏°‡∏≤‡∏ï‡∏≤1.png': {
        name: '‡∏°‡∏≤‡∏ï‡∏≤ (Mata)',
        innerText: 'Mother',
        meaning: '‡∏°‡∏≤‡∏£‡∏î‡∏≤ ‡πÅ‡∏°‡πà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡πà ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏•‡∏∂‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏ï‡∏ï‡∏≤‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏î‡∏π ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç'
    },
    '‡∏°‡∏≤‡∏ï‡∏≤2.png': {
        name: '‡∏°‡∏≤‡∏ï‡∏≤ (Mata)',
        innerText: 'Caregiver',
        meaning: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏î‡∏π ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏ï‡∏ï‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏î‡∏π‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô'
    },
    '‡∏•‡∏≤‡∏†‡∏∞1.png': {
        name: '‡∏•‡∏≤‡∏†‡∏∞ (Labha)',
        innerText: 'Profit',
        meaning: '‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡πÜ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡πÜ ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå'
    },
    '‡∏•‡∏≤‡∏†‡∏∞2.png': {
        name: '‡∏•‡∏≤‡∏†‡∏∞ (Labha)',
        innerText: 'Gain',
        meaning: '‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏† ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏• ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤',
        description: '‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏• ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô'
    },
    '‡∏™‡∏´‡∏±‡∏ä‡∏ä‡∏∞1.png': {
        name: '‡∏™‡∏´‡∏±‡∏ä‡∏ä‡∏∞ (Sahaccha)',
        innerText: 'Friend',
        meaning: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡∏°‡∏¥‡∏ï‡∏£‡∏™‡∏´‡∏≤‡∏¢ ‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠ ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏û‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏° ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ù‡∏π‡∏á'
    },
    '‡∏™‡∏´‡∏±‡∏ä‡∏ä‡∏∞2.png': {
        name: '‡∏™‡∏´‡∏±‡∏ä‡∏ä‡∏∞ (Sahaccha)',
        innerText: 'Cooperation',
        meaning: '‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô',
        description: '‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏¢‡∏≤‡∏°‡∏•‡∏≥‡∏ö‡∏≤‡∏Å ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏°‡∏¥‡∏ï‡∏£‡∏™‡∏´‡∏≤‡∏¢'
    },
    '‡∏™‡∏±‡∏Å‡∏Å‡∏∞.png': {
        name: '‡∏™‡∏±‡∏Å‡∏Å‡∏∞ (Sakka)',
        innerText: 'Leadership',
        meaning: '‡∏û‡∏£‡∏∞‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå ‡∏ú‡∏π‡πâ‡∏ô‡∏≥ ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡∏¢‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏≠‡∏≥‡∏ô‡∏≤‡∏à ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏µ‡πâ‡∏ô‡∏≥ ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏î‡∏µ'
    },
    '‡∏™‡∏±‡∏Å‡∏Å‡∏∞2.png': {
        name: '‡∏™‡∏±‡∏Å‡∏Å‡∏∞ (Sakka)',
        innerText: 'Recognition',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥ ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô',
        description: '‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô'
    },
    '‡∏´‡∏¥‡∏ô‡∏∞1.png': {
        name: '‡∏´‡∏¥‡∏ô‡∏∞ (Hina)',
        innerText: 'Humility',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≥‡∏ï‡πâ‡∏≠‡∏¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πà‡∏≠‡∏°‡∏ï‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πà‡∏≠‡∏°‡∏ï‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'
    },
    '‡∏´‡∏¥‡∏ô‡∏∞2.png': {
        name: '‡∏´‡∏¥‡∏ô‡∏∞ (Hina)',
        innerText: 'Learning',
        meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏° ‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ',
        description: '‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏ß‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á'
    },
    '‡∏≠‡∏£‡∏¥1.png': {
        name: '‡∏≠‡∏£‡∏¥ (Ari)',
        innerText: 'Enemy',
        meaning: '‡∏®‡∏±‡∏ï‡∏£‡∏π ‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏±‡∏á‡∏î‡∏µ',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á'
    },
    '‡∏≠‡∏£‡∏¥2.png': {
        name: '‡∏≠‡∏£‡∏¥ (Ari)',
        innerText: 'Challenge',
        meaning: '‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡∏ä‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏•‡∏≥‡∏ö‡∏≤‡∏Å',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡∏ä‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏•‡∏≥‡∏ö‡∏≤‡∏Å'
    },
    '‡∏≠‡∏±‡∏ï‡∏ï‡∏∞1.png': {
        name: '‡∏≠‡∏±‡∏ï‡∏ï‡∏∞ (Atta)',
        innerText: 'Self',
        meaning: '‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ‡∏à‡∏¥‡∏ï‡πÉ‡∏à ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏à‡∏¥‡∏ï‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï'
    },
    '‡∏≠‡∏±‡∏ï‡∏ï‡∏∞2.png': {
        name: '‡∏≠‡∏±‡∏ï‡∏ï‡∏∞ (Atta)',
        innerText: 'Growth',
        meaning: '‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
        description: '‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏∏‡πà‡∏á‡∏™‡∏π‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á'
    },
    '‡∏≠‡∏±‡∏ï‡∏ï‡∏≤.png': {
        name: '‡∏≠‡∏±‡∏ï‡∏ï‡∏≤ (Atta)',
        innerText: 'Soul',
        meaning: '‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏à ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≠‡∏á‡πÉ‡∏™',
        description: '‡πÑ‡∏û‡πà‡πÅ‡∏´‡πà‡∏á‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≠‡∏á‡πÉ‡∏™ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô'
    },
    '‡∏≠‡∏±‡∏ï‡∏ï‡∏≤2.png': {
        name: '‡∏≠‡∏±‡∏ï‡∏ï‡∏≤ (Atta)',
        innerText: 'Enlightenment',
        meaning: '‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏õ‡∏±‡∏ç‡∏ç‡∏≤ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Å‡∏≤‡∏£‡∏ï‡∏∑‡πà‡∏ô‡∏£‡∏π‡πâ‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á',
        description: '‡∏Å‡∏≤‡∏£‡∏ï‡∏∑‡πà‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏•‡∏∏‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏à‡∏¥‡∏ï‡πÉ‡∏à'
    }
};

// Application State
let dailyCard = null;
let hasPickedToday = false;
let cardHistory = [];
let journalEntries = [];
let currentTab = 'daily';
let currentTheme = 'default';
let soundEnabled = true;
let musicEnabled = false;
let notificationsEnabled = false;
let currentMeditation = null;

// DOM Elements
const cardGrid = document.getElementById('cardGrid');
const statusText = document.getElementById('statusText');
const revealedCard = document.getElementById('revealedCard');
const dailyCardImage = document.getElementById('dailyCardImage');
const cardName = document.getElementById('cardName');
const cardMeaning = document.getElementById('cardMeaning');
const toggleHistoryBtn = document.getElementById('toggleHistory');
const clearHistoryBtn = document.getElementById('clearHistory');
const historyGrid = document.getElementById('historyGrid');

// User Management System
let currentUser = null;
let isUserLoggedIn = false;

const userManager = {
    init() {
        this.loadUserFromStorage();
        this.initSocialProviders();
    },
    
    loadUserFromStorage() {
        const savedUser = localStorage.getItem('currentUser');
        if (savedUser) {
            currentUser = JSON.parse(savedUser);
            isUserLoggedIn = true;
            this.updateUIForLoggedInUser();
            this.loadUserData();
        }
    },
    
    async initSocialProviders() {
        // Initialize Google Sign-In
        if (typeof google !== 'undefined') {
            google.accounts.id.initialize({
                client_id: "YOUR_GOOGLE_CLIENT_ID", // Replace with actual client ID
                callback: this.handleGoogleSignIn.bind(this)
            });
        }
        
        // Initialize Facebook SDK
        if (typeof FB !== 'undefined') {
            FB.init({
                appId: 'YOUR_FACEBOOK_APP_ID', // Replace with actual app ID
                cookie: true,
                xfbml: true,
                version: 'v18.0'
            });
        }
    },
    
    async handleGoogleSignIn(response) {
        try {
            const userInfo = JSON.parse(atob(response.credential.split('.')[1]));
            const user = {
                id: userInfo.sub,
                name: userInfo.name,
                email: userInfo.email,
                avatar: userInfo.picture,
                provider: 'google',
                joinDate: new Date().toISOString()
            };
            
            this.loginUser(user);
        } catch (error) {
            console.error('Google sign-in error:', error);
            showNotification('Google sign-in failed', 'error');
        }
    },
    
    async handleFacebookSignIn() {
        return new Promise((resolve, reject) => {
            FB.login((response) => {
                if (response.authResponse) {
                    FB.api('/me', { fields: 'name,email,picture' }, (userInfo) => {
                        const user = {
                            id: userInfo.id,
                            name: userInfo.name,
                            email: userInfo.email,
                            avatar: userInfo.picture.data.url,
                            provider: 'facebook',
                            joinDate: new Date().toISOString()
                        };
                        this.loginUser(user);
                        resolve(user);
                    });
                } else {
                    reject('Facebook login cancelled');
                }
            }, { scope: 'email' });
        });
    },
    
    // Simulated LINE login (requires actual LINE Login setup)
    async handleLineSignIn() {
        // This would integrate with LINE Login API
        showNotification('LINE login will be available soon!', 'info');
    },
    
    async handleEmailSignIn(email, password) {
        // Simulated email authentication
        // In production, this would connect to your backend
        try {
            const user = {
                id: 'email_' + Date.now(),
                name: email.split('@')[0],
                email: email,
                avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(email)}&background=random`,
                provider: 'email',
                joinDate: new Date().toISOString()
            };
            
            this.loginUser(user);
            return user;
        } catch (error) {
            throw new Error('Email sign-in failed');
        }
    },
    
    async handleEmailRegister(name, email, password) {
        // Simulated registration
        try {
            const user = {
                id: 'email_' + Date.now(),
                name: name,
                email: email,
                avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&background=random`,
                provider: 'email',
                joinDate: new Date().toISOString()
            };
            
            this.loginUser(user);
            return user;
        } catch (error) {
            throw new Error('Registration failed');
        }
    },
    
    loginUser(user) {
        currentUser = user;
        isUserLoggedIn = true;
        
        // Save to localStorage
        localStorage.setItem('currentUser', JSON.stringify(user));
        
        // Update UI
        this.updateUIForLoggedInUser();
        
        // Load user's data
        this.loadUserData();
        
        // Close login modal
        closeLoginModal();
        
        showNotification(`Welcome back, ${user.name}!`, 'success');
    },
    
    logoutUser() {
        currentUser = null;
        isUserLoggedIn = false;
        
        // Clear localStorage
        localStorage.removeItem('currentUser');
        localStorage.removeItem(`userData_${currentUser?.id}`);
        
        // Update UI
        this.updateUIForLoggedOutUser();
        
        showNotification('Logged out successfully', 'info');
    },
    
    updateUIForLoggedInUser() {
        const loginBtn = document.getElementById('loginBtn');
        const userProfileBtn = document.getElementById('userProfileBtn');
        
        loginBtn.style.display = 'none';
        userProfileBtn.style.display = 'block';
        
        // Update user panel
        document.getElementById('userName').textContent = currentUser.name;
        document.getElementById('userEmail').textContent = currentUser.email;
        document.getElementById('userProvider').textContent = `via ${currentUser.provider}`;
        document.getElementById('userAvatar').src = currentUser.avatar;
        
        // Update member since
        const joinDate = new Date(currentUser.joinDate);
        document.getElementById('userMemberSince').textContent = joinDate.toLocaleDateString();
    },
    
    updateUIForLoggedOutUser() {
        const loginBtn = document.getElementById('loginBtn');
        const userProfileBtn = document.getElementById('userProfileBtn');
        
        loginBtn.style.display = 'block';
        userProfileBtn.style.display = 'none';
        
        // Close user panel if open
        const userPanel = document.getElementById('userPanel');
        userPanel.classList.remove('open');
    },
    
    saveUserData() {
        if (!isUserLoggedIn) return;
        
        const userData = {
            cardHistory: cardHistory,
            settings: {
                language: currentLanguage,
                theme: document.body.getAttribute('data-theme') || 'default',
                soundEnabled: document.getElementById('soundToggle')?.checked,
                musicEnabled: document.getElementById('musicToggle')?.checked,
                notificationsEnabled: document.getElementById('notificationsToggle')?.checked
            },
            stats: {
                totalCards: cardHistory.length,
                daysActive: this.calculateDaysActive(),
                lastVisit: new Date().toISOString()
            }
        };
        
        localStorage.setItem(`userData_${currentUser.id}`, JSON.stringify(userData));
    },
    
    loadUserData() {
        if (!isUserLoggedIn) return;
        
        const userData = localStorage.getItem(`userData_${currentUser.id}`);
        if (userData) {
            const data = JSON.parse(userData);
            
            // Load card history
            if (data.cardHistory) {
                cardHistory = data.cardHistory;
                renderHistory();
            }
            
            // Load settings
            if (data.settings) {
                if (data.settings.language) {
                    switchLanguage(data.settings.language);
                }
                if (data.settings.theme) {
                    changeTheme(data.settings.theme);
                }
            }
            
            // Update user stats in UI
            this.updateUserStats(data.stats);
        }
    },
    
    updateUserStats(stats) {
        if (stats) {
            document.getElementById('userCardCount').textContent = stats.totalCards || cardHistory.length;
            document.getElementById('userDaysActive').textContent = stats.daysActive || this.calculateDaysActive();
        }
    },
    
    calculateDaysActive() {
        if (cardHistory.length === 0) return 0;
        
        const dates = [...new Set(cardHistory.map(card => 
            new Date(card.date).toDateString()
        ))];
        return dates.length;
    },
    
    async syncUserData() {
        if (!isUserLoggedIn) return;
        
        showNotification('Syncing data...', 'info');
        
        // Simulate sync process
        setTimeout(() => {
            this.saveUserData();
            showNotification('Data synced successfully!', 'success');
        }, 1500);
    },
    
    exportUserData() {
        if (!isUserLoggedIn) return;
        
        const userData = {
            user: currentUser,
            cardHistory: cardHistory,
            exportDate: new Date().toISOString()
        };
        
        const dataStr = JSON.stringify(userData, null, 2);
        const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
        
        const exportFileDefaultName = `fortune-cards-data-${currentUser.name.replace(/\s+/g, '-')}.json`;
        
        const linkElement = document.createElement('a');
        linkElement.setAttribute('href', dataUri);
        linkElement.setAttribute('download', exportFileDefaultName);
        linkElement.click();
        
        showNotification('Data exported successfully!', 'success');
    }
};

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    try {
        // Initialize user management first
        userManager.init();
        
        loadFromStorage();
        
        // Initialize language system
        const savedLanguage = localStorage.getItem('language') || 'th';
        currentLanguage = savedLanguage;
        document.getElementById('languageSelect').value = savedLanguage;
        document.getElementById('languageSelect').addEventListener('change', function() {
            switchLanguage(this.value);
        });
        
        // Update UI with current language
        updateUILanguage();
        updateDailyQuote();
        
        checkDailyCard();
        generateCardGrid();
        setupEventListeners();
        renderHistory();
        
    } catch (error) {
        console.error('Error initializing app:', error);
    }
});

// Load data from localStorage
function loadFromStorage() {
    const storedDailyCard = localStorage.getItem('dailyCard');
    const storedDate = localStorage.getItem('dailyCardDate');
    const storedHistory = localStorage.getItem('cardHistory');
    
    const today = new Date().toDateString();
    
    if (storedDate === today && storedDailyCard) {
        dailyCard = JSON.parse(storedDailyCard);
        hasPickedToday = true;
    }
    
    if (storedHistory) {
        cardHistory = JSON.parse(storedHistory);
    }
}

// Save data to localStorage (with user support)
function saveToStorage() {
    const today = new Date().toDateString();
    
    if (dailyCard) {
        localStorage.setItem('dailyCard', JSON.stringify(dailyCard));
        localStorage.setItem('dailyCardDate', today);
    }
    
    localStorage.setItem('cardHistory', JSON.stringify(cardHistory));
    
    // Also save to user account if logged in
    if (isUserLoggedIn) {
        userManager.saveUserData();
    }
}

// Allow new card selection on every page refresh (no daily restriction)
function checkDailyCard() {
    // Always allow new card selection, but load last session if exists
    if (dailyCard) {
        // Show the last picked card but allow picking new ones
        const t = translations[currentLanguage];
        statusText.textContent = t.clickCard || '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏û‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô';
        
        // Don't restrict card selection anymore
        hasPickedToday = false;
    }
    
    // Always enable fresh card selection
    hasPickedToday = false;
}

// Generate the card grid - single large card
function generateCardGrid() {
    const cardFiles = Object.keys(CARD_DATA);
    cardGrid.innerHTML = '';
    
    // Select a random card for today if none exists
    if (!hasPickedToday) {
        const randomCardFile = cardFiles[Math.floor(Math.random() * cardFiles.length)];
        
        const cardElement = document.createElement('div');
        cardElement.className = 'card single-card';
        cardElement.dataset.cardFile = randomCardFile;
        
        const img = document.createElement('img');
        img.src = 'Card Back.png';
        img.alt = '‡∏Å‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏û‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô';
        
        cardElement.appendChild(img);
        cardGrid.appendChild(cardElement);
        
        // Add click event listener
        cardElement.addEventListener('click', () => handleCardClick(randomCardFile, cardElement));
    }
}

// Handle card click
function handleCardClick(cardFile, cardElement) {
    // Remove daily restriction - allow multiple picks per session
    // But add a small delay to prevent spam clicking
    if (cardElement.classList.contains('clicking')) {
        return;
    }
    
    cardElement.classList.add('clicking');
    
    // Disable all cards
    const allCards = document.querySelectorAll('.card');
    allCards.forEach(card => {
        card.style.pointerEvents = 'none';
        card.classList.add('loading');
    });
    
    // Animate card flip
    cardElement.classList.add('flipped');
    
    setTimeout(() => {
        // Reveal the selected card
        const cardData = getCardData(cardFile);
        const selectedCard = {
            file: cardFile,
            name: cardData.name,
            meaning: cardData.meaning,
            date: new Date().toISOString()
        };
        
        dailyCard = selectedCard;
        // Don't set hasPickedToday = true anymore to allow multiple picks
        
        // Update the card image to show the revealed card
        const cardImg = cardElement.querySelector('img');
        cardImg.src = cardFile;
        cardImg.alt = cardData.name;
        
        // Add to history
        cardHistory.unshift(selectedCard);
        
        // Keep only last 50 records (increased for multiple daily picks)
        if (cardHistory.length > 50) {
            cardHistory = cardHistory.slice(0, 50);
        }
        
        saveToStorage();
        
        const t = translations[currentLanguage];
        statusText.innerHTML = `${t.yourSelectedCard} <br><small>üîÑ ${t.clickForNew}</small>`;
        showRevealedCard(selectedCard);
        renderHistory();
        
        // Reset for next pick after showing result
        setTimeout(() => {
            cardElement.classList.remove('clicking');
            // Regenerate card grid for next pick
            setTimeout(() => {
                generateCardGrid();
            }, 2000);
        }, 1000);
        
        // Show lucky information
        const luckyInfo = generateLuckyInfo(cardFile);
        document.getElementById('luckyColor').textContent = luckyInfo.color;
        document.getElementById('luckyNumbers').textContent = luckyInfo.numbers;
        document.getElementById('luckyTime').textContent = luckyInfo.time;
        document.getElementById('luckyInfo').style.display = 'flex';
        
        // Show daily affirmation
        const affirmation = generateAffirmation(selectedCard.name);
        document.getElementById('dailyAffirmation').textContent = affirmation;
        
        // Play sound effects
        playSound('successSound');
        
        showNotification('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏û‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ', 'success');
    }, 800);
}

// Show the revealed card
function showRevealedCard(card) {
    dailyCardImage.src = card.file;
    
    // Display card name and inner text
    const cardData = getCardData(card.file);
    if (cardData) {
        cardName.innerHTML = `${cardData.name}<br><span style="font-size: 0.8em; color: #666;">${cardData.innerText}</span>`;
        cardMeaning.textContent = cardData.meaning;
        
        // Add description section
        let descriptionElement = document.getElementById('cardDescription');
        if (!descriptionElement) {
            descriptionElement = document.createElement('div');
            descriptionElement.id = 'cardDescription';
            descriptionElement.style.marginTop = '15px';
            descriptionElement.style.padding = '15px';
            descriptionElement.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';
            descriptionElement.style.borderRadius = '10px';
            descriptionElement.style.fontStyle = 'italic';
            cardMeaning.parentNode.appendChild(descriptionElement);
        }
        descriptionElement.innerHTML = `<strong>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:</strong><br>${cardData.description}`;
    } else {
        cardName.textContent = card.name;
        cardMeaning.textContent = card.meaning;
    }
    
    // Set revealed card background to match the card background
    revealedCard.style.background = 'linear-gradient(135deg, #81ecec, #74b9ff)';
    
    // Set card-grid background to the picked card image with blur effect
    const cardGrid = document.getElementById('cardGrid');
    cardGrid.style.backgroundImage = `url('${card.file}')`;
    
    revealedCard.style.display = 'block';
    revealedCard.classList.add('success');
    
    setTimeout(() => {
        revealedCard.classList.remove('success');
    }, 500);
}

// Setup event listeners
function setupEventListeners() {
    toggleHistoryBtn.addEventListener('click', toggleHistory);
    clearHistoryBtn.addEventListener('click', clearHistory);
}

// Toggle history display
function toggleHistory() {
    const isHidden = historyGrid.style.display === 'none';
    historyGrid.style.display = isHidden ? 'grid' : 'none';
    toggleHistoryBtn.textContent = isHidden ? '‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥' : '‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥';
}

// Clear history
function clearHistory() {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÑ‡∏û‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        cardHistory = [];
        localStorage.removeItem('cardHistory');
        renderHistory();
        showNotification('‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
    }
}

// Render history
function renderHistory() {
    historyGrid.innerHTML = '';
    
    if (cardHistory.length === 0) {
        historyGrid.innerHTML = '<p style="text-align: center; color: #666; grid-column: 1 / -1;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÑ‡∏û‡πà</p>';
        return;
    }
    
    cardHistory.forEach(card => {
        const historyItem = document.createElement('div');
        historyItem.className = 'history-item';
        
        const date = new Date(card.date);
        const dateStr = date.toLocaleDateString('th-TH', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        
        historyItem.innerHTML = `
            <img src="${card.file}" alt="${card.name}">
            <h4>${card.name}</h4>
            <p class="date">${dateStr}</p>
        `;
        
        historyGrid.appendChild(historyItem);
    });
}

// Show notification
function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 25px;
        background: ${type === 'success' ? '#00b894' : type === 'warning' ? '#fdcb6e' : '#0984e3'};
        color: white;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        z-index: 1000;
        font-weight: 600;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Remove after 3 seconds
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 300);
    }, 3000);
}

// Manual reset daily card function
function manualResetDailyCard() {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏û‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        hasPickedToday = false;
        dailyCard = null;
        localStorage.removeItem('dailyCard');
        localStorage.removeItem('dailyCardDate');
        
        statusText.textContent = '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏û‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô';
        revealedCard.style.display = 'none';
        document.getElementById('luckyInfo').style.display = 'none';
        
        // Reset backgrounds to default
        const cardGrid = document.getElementById('cardGrid');
        cardGrid.style.backgroundImage = '';
        cardGrid.style.background = 'linear-gradient(135deg, #81ecec, #74b9ff)';
        revealedCard.style.background = 'linear-gradient(135deg, #81ecec, #74b9ff)';
        
        // Re-enable cards and regenerate grid
        cardGrid.innerHTML = '';
        
        generateCardGrid();
        
        showNotification('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏û‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚ú®', 'success');
    }
}

// Reset daily card at midnight
function resetDailyCard() {
    const now = new Date();
    const midnight = new Date();
    midnight.setHours(24, 0, 0, 0);
    
    const timeUntilMidnight = midnight.getTime() - now.getTime();
    
    setTimeout(() => {
        hasPickedToday = false;
        dailyCard = null;
        localStorage.removeItem('dailyCard');
        localStorage.removeItem('dailyCardDate');
        
        statusText.textContent = '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏û‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô';
        revealedCard.style.display = 'none';
        
        // Reset backgrounds to default
        const cardGrid = document.getElementById('cardGrid');
        cardGrid.style.backgroundImage = '';
        cardGrid.style.background = 'linear-gradient(135deg, #81ecec, #74b9ff)';
        revealedCard.style.background = 'linear-gradient(135deg, #81ecec, #74b9ff)';
        
        // Re-enable cards
        const allCards = document.querySelectorAll('.card');
        allCards.forEach(card => {
            card.style.pointerEvents = 'auto';
            card.classList.remove('loading');
        });
        
        generateCardGrid();
        
        // Set up for next day
        resetDailyCard();
    }, timeUntilMidnight);
}

// Initialize reset timer
resetDailyCard();

// Enhanced Features Implementation

// Tab Management
function showTab(tabName) {
    // Hide all tabs
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Remove active class from all nav tabs
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Show selected tab
    const selectedTab = document.getElementById(tabName + 'Tab');
    if (selectedTab) {
        selectedTab.classList.add('active');
    }
    
    // Add active class to nav tab
    event.target.classList.add('active');
    
    currentTab = tabName;
    
    // Load specific tab content
    if (tabName === 'analytics') {
        loadAnalytics();
    } else if (tabName === 'journal') {
        loadJournal();
        populateJournalCardSelect();
    }
}

// Settings Management
function openSettings() {
    const panel = document.getElementById('settingsPanel');
    panel.classList.add('open');
}

function closeSettings() {
    const panel = document.getElementById('settingsPanel');
    panel.classList.remove('open');
}

// Theme Management
function changeTheme(theme) {
    document.body.setAttribute('data-theme', theme);
    currentTheme = theme;
    localStorage.setItem('selectedTheme', theme);
}

// Sound Management
function playSound(soundId) {
    if (!soundEnabled) return;
    
    const sound = document.getElementById(soundId);
    if (sound && sound.src) {
        sound.currentTime = 0;
        sound.play().catch(e => {
            // Silently handle missing sound files
            console.log('Sound not available:', soundId);
        });
    }
}

// Lucky Information Generator
function generateLuckyInfo(cardFile) {
    const colors = ['‡πÅ‡∏î‡∏á', '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô', '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á', '‡∏°‡πà‡∏ß‡∏á', '‡∏ä‡∏°‡∏û‡∏π', '‡∏™‡πâ‡∏°'];
    const numbers = Array.from({length: 3}, () => Math.floor(Math.random() * 99) + 1);
    const times = ['06:00-09:00', '09:00-12:00', '12:00-15:00', '15:00-18:00', '18:00-21:00'];
    
    return {
        color: colors[Math.floor(Math.random() * colors.length)],
        numbers: numbers.join(', '),
        time: times[Math.floor(Math.random() * times.length)]
    };
}

// Daily Affirmations
function generateAffirmation(cardName) {
    const affirmations = {
        '‡∏Å‡∏î‡∏∏‡∏°‡∏†‡∏∞': '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∏‡∏î‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå',
        '‡∏Å‡∏±‡∏°‡∏°‡∏∞': '‡∏â‡∏±‡∏ô‡∏ó‡∏≥‡πÅ‡∏ï‡πà‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏î‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤',
        '‡πÄ‡∏Ñ‡∏´‡∏±‡∏á': '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô',
        '‡∏ç‡∏≤‡∏ï‡∏¥': '‡∏â‡∏±‡∏ô‡∏•‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà',
        '‡∏ï‡∏ô‡∏∏': '‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏î‡∏∏‡∏•',
        '‡∏ó‡∏≤‡∏ô‡∏±‡∏á': '‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏ô‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∏‡∏î‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤',
        '‡∏ò‡∏ô‡∏±‡∏á': '‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏°‡πà‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏î‡∏µ‡πÜ',
        '‡∏õ‡∏±‡∏ï‡∏ô‡∏¥': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏â‡∏±‡∏ô‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏•‡∏∞‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô',
        '‡∏õ‡∏¥‡∏ï‡∏≤': '‡∏â‡∏±‡∏ô‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û‡πÅ‡∏•‡∏∞‡∏£‡∏≥‡∏•‡∏∂‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì‡∏á‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏û‡∏ö‡∏∏‡∏£‡∏∏‡∏©',
        'default': '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà‡πÜ'
    };
    
    for (const key in affirmations) {
        if (cardName.includes(key)) {
            return affirmations[key];
        }
    }
    
    return affirmations.default;
}

// Card Sharing
function shareCard() {
    if (!dailyCard) return;
    
    const shareData = {
        title: '‡πÑ‡∏û‡πà‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß 7 ‡∏î‡∏ß‡∏á',
        text: `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏û‡πà ${dailyCard.name}: ${dailyCard.meaning}`,
        url: window.location.href
    };
    
    if (navigator.share) {
        navigator.share(shareData);
    } else {
        // Fallback for browsers that don't support Web Share API
        const text = `${shareData.title}\n${shareData.text}\n${shareData.url}`;
        navigator.clipboard.writeText(text).then(() => {
            showNotification('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß', 'success');
        });
    }
}

// Text-to-Speech
function readAloud() {
    if (!dailyCard) return;
    
    const text = `‡πÑ‡∏û‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ${dailyCard.name}. ${dailyCard.meaning}`;
    
    if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'th-TH';
        utterance.rate = 0.8;
        speechSynthesis.speak(utterance);
    }
}

// Journal Management
function saveToJournal() {
    if (!dailyCard) return;
    
    const today = new Date().toISOString().split('T')[0];
    const entry = {
        id: Date.now(),
        date: today,
        card: dailyCard,
        mood: 'happy',
        notes: `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏û‡πà ${dailyCard.name} - ${dailyCard.meaning}`
    };
    
    journalEntries.unshift(entry);
    localStorage.setItem('journalEntries', JSON.stringify(journalEntries));
    
    showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß', 'success');
    
    if (currentTab === 'journal') {
        loadJournal();
    }
}

// Card Spreads
let currentSpread = null;
function startSpread(type) {
    const spreadTypes = {
        'davidstar': {
            title: '‡∏î‡∏≤‡∏ß‡∏¥‡∏î‡∏™‡∏ï‡∏≤‡∏£‡πå - ‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏û‡∏•‡∏±‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏•',
            cards: 7,
            description: '‡πÑ‡∏û‡πà 7 ‡πÉ‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏î‡∏≤‡∏ß‡∏´‡∏Å‡πÅ‡∏â‡∏Å ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
            layout: 'star'
        }
    };
    
    const spread = spreadTypes[type];
    if (!spread) return;
    
    currentSpread = spread;
    
    // David Star special shuffling interface
    if (spread.layout === 'star') {
        startDavidStarShuffle();
    }
}



// David Star Shuffling System
let davidStarCards = [];
let davidStarPosition = 0;
let shuffledDeck = [];
let isShuffling = false;

const starPositionNames = [
    '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏≠‡∏∏‡∏î‡∏°‡∏Å‡∏≤‡∏£‡∏ì‡πå (‡∏à‡∏∏‡∏î‡∏ö‡∏ô)',
    '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ (‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô)', 
    '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á)',
    '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏á)',
    '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏±‡∏ç‡∏ç‡∏≤ (‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á)',
    '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏ç‡∏≤‡∏ì (‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô)',
    '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (‡πÉ‡∏à‡∏Å‡∏•‡∏≤‡∏á)'
];

function startDavidStarShuffle() {
    davidStarCards = [];
    davidStarPosition = 0;
    shuffledDeck = [...Object.keys(CARD_DATA)];
    
    showDavidStarPickInterface();
}

function shuffleDeck(times = 7) {
    isShuffling = true;
    updateShuffleDisplay();
    
    let shuffleCount = 0;
    const shuffleInterval = setInterval(() => {
        // Fisher-Yates shuffle algorithm
        for (let i = shuffledDeck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];
        }
        
        shuffleCount++;
        updateShuffleDisplay(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏±‡∏ö‡πÑ‡∏û‡πà... ${shuffleCount}/${times}`);
        
        if (shuffleCount >= times) {
            clearInterval(shuffleInterval);
            isShuffling = false;
            showCardPickOptions();
        }
    }, 300);
}

function showDavidStarPickInterface() {
    const resultDiv = document.getElementById('spreadResult');
    const titleDiv = document.getElementById('spreadTitle');
    const cardsDiv = document.getElementById('spreadCards');
    const interpretationDiv = document.getElementById('spreadInterpretation');
    
    titleDiv.textContent = `‡∏î‡∏≤‡∏ß‡∏¥‡∏î‡∏™‡∏ï‡∏≤‡∏£‡πå - ${starPositionNames[davidStarPosition]}`;
    
    cardsDiv.innerHTML = `
        <div class="david-star-shuffle-info">
            <h4>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏û‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${starPositionNames[davidStarPosition]}</h4>
            <p>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà ${davidStarPosition + 1} ‡∏à‡∏≤‡∏Å 7</p>
            <div class="shuffle-status" id="shuffleStatus">
                <button class="btn primary" onclick="shuffleDeck(7 + Math.floor(Math.random() * 5))" ${isShuffling ? 'disabled' : ''}>
                    <i class="fas fa-shuffle"></i> ‡∏™‡∏±‡∏ö‡πÑ‡∏û‡πà
                </button>
            </div>
            <div class="card-pick-area" id="cardPickArea" style="display: none;">
                <!-- Card options will appear here after shuffling -->
            </div>
        </div>
    `;
    
    interpretationDiv.innerHTML = `
        <div class="david-star-progress">
            <h4>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤</h4>
            <div class="progress-cards">
                ${davidStarCards.map((card, index) => `
                    <div class="progress-card completed">
                        <div class="card-mini">
                            <img src="${card}" alt="${CARD_DATA[card].name}">
                        </div>
                        <p>${starPositionNames[index]}</p>
                    </div>
                `).join('')}
                <div class="progress-card current">
                    <div class="card-mini">
                        <img src="Card Back.png" alt="Current Position">
                    </div>
                    <p>${starPositionNames[davidStarPosition]}</p>
                </div>
                ${Array.from({length: 6 - davidStarPosition}, (_, index) => `
                    <div class="progress-card pending">
                        <div class="card-mini">
                            <img src="Card Back.png" alt="Pending">
                        </div>
                        <p>${starPositionNames[davidStarPosition + index + 1]}</p>
                    </div>
                `).join('')}
            </div>
        </div>
    `;
    
    resultDiv.style.display = 'block';
    resultDiv.scrollIntoView({ behavior: 'smooth' });
}

function updateShuffleDisplay(message = '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡∏ö‡πÑ‡∏û‡πà') {
    const shuffleStatus = document.getElementById('shuffleStatus');
    if (shuffleStatus) {
        if (isShuffling) {
            shuffleStatus.innerHTML = `
                <div class="shuffling-animation">
                    <i class="fas fa-sync fa-spin"></i> ${message}
                </div>
            `;
        } else {
            shuffleStatus.innerHTML = `
                <button class="btn primary" onclick="shuffleDeck(7 + Math.floor(Math.random() * 5))" ${isShuffling ? 'disabled' : ''}>
                    <i class="fas fa-shuffle"></i> ‡∏™‡∏±‡∏ö‡πÑ‡∏û‡πà
                </button>
            `;
        }
    }
}

function showCardPickOptions() {
    const cardPickArea = document.getElementById('cardPickArea');
    const numOptions = 5; // Show 5 face-down cards to pick from
    
    cardPickArea.innerHTML = `
        <h4>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡πÑ‡∏û‡πà‡∏à‡∏≤‡∏Å ${numOptions} ‡πÉ‡∏ö</h4>
        <div class="pick-cards-grid">
            ${Array.from({length: numOptions}, (_, index) => `
                <div class="pick-card" onclick="pickDavidStarCard(${index})">
                    <img src="Card Back.png" alt="Pick this card">
                    <p>‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà ${index + 1}</p>
                </div>
            `).join('')}
        </div>
    `;
    
    cardPickArea.style.display = 'block';
}

function pickDavidStarCard(cardIndex) {
    // Get the shuffled card
    const selectedCard = shuffledDeck[cardIndex];
    davidStarCards.push(selectedCard);
    
    // Remove selected card from deck
    shuffledDeck.splice(cardIndex, 1);
    
    // Show selected card briefly
    showSelectedCard(selectedCard);
    
    setTimeout(() => {
        davidStarPosition++;
        
        if (davidStarPosition >= 7) {
            // All cards selected, show final star layout
            displaySpreadResult(currentSpread, davidStarCards);
        } else {
            // Continue to next position
            showDavidStarPickInterface();
        }
    }, 2000);
}

function showSelectedCard(cardFile) {
    const cardPickArea = document.getElementById('cardPickArea');
    cardPickArea.innerHTML = `
        <div class="selected-card-reveal">
            <h4>‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</h4>
            <div class="revealed-card">
                <img src="${cardFile}" alt="${CARD_DATA[cardFile].name}">
                <h5>${CARD_DATA[cardFile].name}</h5>
                <p>${CARD_DATA[cardFile].meaning}</p>
            </div>
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...</p>
        </div>
    `;
}

function displaySpreadResult(spread, cards) {
    const resultDiv = document.getElementById('spreadResult');
    const titleDiv = document.getElementById('spreadTitle');
    const cardsDiv = document.getElementById('spreadCards');
    const interpretationDiv = document.getElementById('spreadInterpretation');
    
    titleDiv.textContent = spread.title;
    
    cardsDiv.innerHTML = '';
    
    // Special handling for David Star layout
    if (spread.layout === 'star') {
        displayDavidStarLayout(cardsDiv, cards);
        interpretationDiv.innerHTML = generateDavidStarInterpretation(cards);
    } else {
        cards.forEach((cardFile, index) => {
            const cardElement = document.createElement('div');
            cardElement.className = 'card';
            cardElement.innerHTML = `<img src="${cardFile}" alt="${CARD_DATA[cardFile].name}">`;
            cardsDiv.appendChild(cardElement);
        });
        
        interpretationDiv.innerHTML = `
            <h4>‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°</h4>
            <p>${spread.description}</p>
            ${cards.map((cardFile, index) => `
                <div style="margin: 15px 0;">
                    <strong>‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà ${index + 1}: ${CARD_DATA[cardFile].name}</strong><br>
                    ${CARD_DATA[cardFile].meaning}
                </div>
            `).join('')}
        `;
    }
    
    resultDiv.style.display = 'block';
    resultDiv.scrollIntoView({ behavior: 'smooth' });
}

function displayDavidStarLayout(container, cards) {
    container.className = 'david-star-layout';
    
    const starPositions = [
        'star-top',
        'star-top-right', 
        'star-bottom-right',
        'star-bottom',
        'star-bottom-left',
        'star-top-left',
        'star-center'
    ];
    
    cards.forEach((cardFile, index) => {
        const cardElement = document.createElement('div');
        cardElement.className = `card ${starPositions[index]}`;
        cardElement.innerHTML = `<img src="${cardFile}" alt="${CARD_DATA[cardFile].name}">`;
        container.appendChild(cardElement);
    });
}

function generateDavidStarInterpretation(cards) {
    const positions = [
        {
            name: '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏≠‡∏∏‡∏î‡∏°‡∏Å‡∏≤‡∏£‡∏ì‡πå (‡∏à‡∏∏‡∏î‡∏ö‡∏ô)',
            meaning: '‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
            card: cards[0]
        },
        {
            name: '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ (‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô)',
            meaning: '‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç',
            card: cards[1]
        },
        {
            name: '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á)',
            meaning: '‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö',
            card: cards[2]
        },
        {
            name: '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏á)',
            meaning: '‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á',
            card: cards[3]
        },
        {
            name: '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏±‡∏ç‡∏ç‡∏≤ (‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á)',
            meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå',
            card: cards[4]
        },
        {
            name: '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏ç‡∏≤‡∏ì (‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô)',
            meaning: '‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏ç‡∏≤‡∏ì',
            card: cards[5]
        },
        {
            name: '‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡πÅ‡∏´‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (‡πÉ‡∏à‡∏Å‡∏•‡∏≤‡∏á)',
            meaning: '‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πà‡∏ô‡πÅ‡∏ó‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
            card: cards[6]
        }
    ];
    
    return `
        <h4>‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏≤‡∏ß‡∏¥‡∏î‡∏™‡∏ï‡∏≤‡∏£‡πå</h4>
        <p>‡∏î‡∏≤‡∏ß‡∏´‡∏Å‡πÅ‡∏â‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏•‡∏Å‡∏à‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡πÇ‡∏•‡∏Å‡∏Å‡∏≤‡∏¢ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå‡πÅ‡∏•‡∏∞‡∏î‡∏¥‡∏ô ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÑ‡∏û‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï</p>
        
        <div class="david-star-interpretation">
            ${positions.map(pos => `
                <div class="star-position-meaning">
                    <h4>${pos.name}</h4>
                    <p><strong>${CARD_DATA[pos.card].name}:</strong> ${CARD_DATA[pos.card].meaning}</p>
                    <p style="font-style: italic; margin-top: 8px;">${pos.meaning}</p>
                </div>
            `).join('')}
        </div>
        
        <div style="margin-top: 30px; padding: 20px; background: rgba(255, 255, 255, 0.1); border-radius: 15px;">
            <h4>‡∏™‡∏£‡∏∏‡∏õ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°</h4>
            <p>‡∏î‡∏≤‡∏ß‡∏¥‡∏î‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏• ‡πÑ‡∏û‡πà‡πÉ‡∏ô‡πÉ‡∏à‡∏Å‡∏•‡∏≤‡∏á "${CARD_DATA[cards[6]].name}" ‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏Å‡πà‡∏ô‡πÅ‡∏ó‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡∏£‡∏≠‡∏ö‡πÜ ‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏á‡πà‡∏°‡∏∏‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</p>
        </div>
    `;
}

// Initialize enhanced features
document.addEventListener('DOMContentLoaded', function() {
    // Load saved settings
    const savedTheme = localStorage.getItem('selectedTheme');
    if (savedTheme) {
        changeTheme(savedTheme);
        document.getElementById('themeSelect').value = savedTheme;
    }
    
    const savedJournal = localStorage.getItem('journalEntries');
    if (savedJournal) {
        journalEntries = JSON.parse(savedJournal);
    }
    
    // Setup settings event listeners
    document.getElementById('themeSelect').addEventListener('change', (e) => {
        changeTheme(e.target.value);
    });
    
    document.getElementById('soundToggle').addEventListener('change', (e) => {
        soundEnabled = e.target.checked;
    });
    
    document.getElementById('musicToggle').addEventListener('change', (e) => {
        musicEnabled = e.target.checked;
        const music = document.getElementById('backgroundMusic');
        if (musicEnabled && music.src) {
            music.play().catch(e => console.log('Background music not available'));
        } else {
            music.pause();
        }
    });
    
    // Setup journal date to today
    document.getElementById('journalDate').value = new Date().toISOString().split('T')[0];
    
    // Setup daily quote (use the new system instead)
    updateDailyQuote();
    
    // Add keyboard shortcut for reset (Ctrl+R or Cmd+R)
    document.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key === 'r' && e.shiftKey) {
            e.preventDefault();
            manualResetDailyCard();
        }
    });
});

// Login Modal Functions
function openLoginModal() {
    const modal = document.getElementById('loginModal');
    modal.classList.add('open');
}

function closeLoginModal() {
    const modal = document.getElementById('loginModal');
    modal.classList.remove('open');
    
    // Reset forms
    document.getElementById('emailLoginForm').style.display = 'none';
    document.getElementById('registerForm').style.display = 'none';
}

function showEmailLogin() {
    document.getElementById('emailLoginForm').style.display = 'block';
    document.getElementById('registerForm').style.display = 'none';
}

function showRegisterForm() {
    document.getElementById('registerForm').style.display = 'block';
    document.getElementById('emailLoginForm').style.display = 'none';
}

// Social Login Functions
async function loginWithGoogle() {
    try {
        if (typeof google !== 'undefined') {
            google.accounts.id.prompt();
        } else {
            // Fallback demo login
            const user = {
                id: 'google_demo_' + Date.now(),
                name: 'Demo Google User',
                email: 'demo@gmail.com',
                avatar: 'https://ui-avatars.com/api/?name=Google+User&background=4285f4&color=fff',
                provider: 'google',
                joinDate: new Date().toISOString()
            };
            userManager.loginUser(user);
        }
    } catch (error) {
        console.error('Google login error:', error);
        showNotification('Google login failed', 'error');
    }
}

async function loginWithFacebook() {
    try {
        if (typeof FB !== 'undefined') {
            await userManager.handleFacebookSignIn();
        } else {
            // Fallback demo login
            const user = {
                id: 'facebook_demo_' + Date.now(),
                name: 'Demo Facebook User',
                email: 'demo@facebook.com',
                avatar: 'https://ui-avatars.com/api/?name=Facebook+User&background=1877f2&color=fff',
                provider: 'facebook',
                joinDate: new Date().toISOString()
            };
            userManager.loginUser(user);
        }
    } catch (error) {
        console.error('Facebook login error:', error);
        showNotification('Facebook login failed', 'error');
    }
}

async function loginWithLine() {
    try {
        // Demo LINE login
        const user = {
            id: 'line_demo_' + Date.now(),
            name: 'Demo LINE User',
            email: 'demo@line.me',
            avatar: 'https://ui-avatars.com/api/?name=LINE+User&background=00b900&color=fff',
            provider: 'line',
            joinDate: new Date().toISOString()
        };
        userManager.loginUser(user);
    } catch (error) {
        console.error('LINE login error:', error);
        showNotification('LINE login failed', 'error');
    }
}

async function loginWithEmail() {
    const email = document.getElementById('loginEmail').value;
    const password = document.getElementById('loginPassword').value;
    
    if (!email || !password) {
        showNotification('Please enter email and password', 'warning');
        return;
    }
    
    try {
        await userManager.handleEmailSignIn(email, password);
    } catch (error) {
        console.error('Email login error:', error);
        showNotification('Email login failed', 'error');
    }
}

async function registerWithEmail() {
    const name = document.getElementById('registerName').value;
    const email = document.getElementById('registerEmail').value;
    const password = document.getElementById('registerPassword').value;
    
    if (!name || !email || !password) {
        showNotification('Please fill in all fields', 'warning');
        return;
    }
    
    try {
        await userManager.handleEmailRegister(name, email, password);
    } catch (error) {
        console.error('Registration error:', error);
        showNotification('Registration failed', 'error');
    }
}

// User Panel Functions
function toggleUserPanel() {
    const userPanel = document.getElementById('userPanel');
    userPanel.classList.toggle('open');
}

function syncUserData() {
    userManager.syncUserData();
}

function exportUserData() {
    userManager.exportUserData();
}

function logoutUser() {
    if (confirm('Are you sure you want to logout?')) {
        userManager.logoutUser();
        toggleUserPanel();
    }
} 